buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.8'
    }
}

plugins {
    id "com.google.protobuf" version "0.8.8"
    id "java"
    id "application"
    id "idea"
    id 'com.github.ben-manes.versions' version '0.21.0'
}

group 'io.github.carloshpb.serverclient'
version '1.0-SNAPSHOT'

protobuf {
    protoc {
        // The version of protoc must match protobuf-java. If you don't depend on
        // protobuf-java directly, you will be transitively depending on the
        // protobuf-java version that grpc depends on.
        artifact = "com.google.protobuf:protoc:3.7.1"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.21.0'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
    generatedFilesBaseDir = "$projectDir/src/generated"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    // Use JUnit test framework
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.1'

    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.2'

    compile 'io.grpc:grpc-all:1.21.0'
}

idea {
    module {
        sourceDirs += file("${projectDir}/src/generated/main/java");
        sourceDirs += file("${projectDir}/src/generated/main/grpc");
    }
}

task runServer(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'serverclient.server.AppServer'
}

task runClient(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'serverclient.client.AppClient'
}

startScripts.enabled = false

task appServer(type: CreateStartScripts) {
    mainClassName = "serverclient.server.AppServer"
    applicationName = "app-server"
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}

task appClient(type: CreateStartScripts) {
    mainClassName = "serverclient.client.AppClient"
    applicationName = "app-client"
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}

applicationDistribution.into("bin") {
    from(appServer)
    from(appClient)
    fileMode = 0755
}